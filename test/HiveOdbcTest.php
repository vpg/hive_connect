<?php
/**
 * User: cjimenez
 * Date: 07/01/15 18:01
 */
require_once __DIR__.'/../vendor/autoload.php';
require_once __DIR__.'/../env.php';

class HiveOdbcTest extends PHPUnit_Framework_TestCase {

    private $timeStart;

    /**
     * Testing connection to hive DB
     */
    public function testConnection() {
        $db = $this->connect();
        $this->assertEquals(get_class($db), 'PDO');
    }

    /**
     * Testing a show tables
     * @depends testConnection
     */
    public function testShowTable() {
        $result = $this->connect()->query('show tables');
        $this->assertNotEmpty($result);
    }

    /**
     * Testing a select
     * @depends testConnection
     */
    public function testSelect() {
        $statement = $this->connect()->query('SELECT * FROM voyageprive_daily.city limit 10');
        $result = $statement->fetchAll(PDO::FETCH_ASSOC);
        $this->assertNotEmpty($result);
    }

    /**
     * Testing a select with where clause
     *
     * @depends testConnection
     */
    public function testSelectWithCondition() {
        $result = $this->connect()
            ->query('SELECT * FROM voyageprive_daily.city where city_id > 100 limit 10')
            ->fetchAll(PDO::FETCH_ASSOC);
        $this->assertNotEmpty($result);
    }

    /**
     * Testing a select with columns
     *
     * @depends testConnection
     */
    public function testSelectWithColumns() {
        $result = $this->connect()
            ->query('SELECT city_id FROM voyageprive_daily.city limit 10')
            ->fetchAll(PDO::FETCH_ASSOC);
        $this->assertNotEmpty($result);
    }

    /**
     * Testing a select with Group by
     * @depends testConnection
     */
    public function testSelectWithGroupBy() {
        $query = $this->connect()->query(
            'SELECT country_id, count(*)
             FROM voyageprive_daily.city
             GROUP BY country_id
             ');
        $result = $query->fetchAll(PDO::FETCH_ASSOC);
        $this->assertNotEmpty($result);
    }

    /**
     * Testing a select with Aggregation
     * @depends testConnection
     */
    public function testSelectWithAggregation() {
        $result = $this->connect()->query(
            'SELECT country_id, count(*)
             FROM voyageprive_daily.city
             GROUP BY country_id limit 10
             ')
            ->fetchAll(PDO::FETCH_ASSOC)
        ;
        $this->assertNotEmpty($result);
    }

    /**
     * Testing a select with join
     *
     * @var string $type
     *
     * @depends testConnection
     */
    private function selectWithJoin($type) {
        $result = $this->connect()
            ->query(
            "SELECT *
            FROM voyageprive_daily.city AS ci
            $type JOIN voyageprive_daily.country AS co ON ci.country_id = co.country_id
            limit 10")
            ->fetchAll(PDO::FETCH_ASSOC)
        ;
        $this->assertNotEmpty($result);
    }

    /**
     * Testing a select with left join
     *
     * @depends testConnection
     */
    public function testSelectWithInnerJoin() {
        $this->selectWithJoin('inner');
    }

    /**
     * Testing a select with left join
     *
     * @depends testConnection
     */
    public function testSelectWithLeftJoin() {
        $this->selectWithJoin('left');
    }

    /**
     * Testing a select with right join
     *
     * @depends testConnection
     */
    public function testSelectWithRightJoin() {
        $this->selectWithJoin('right');
    }

    /**
     * @return \PDO
     */
    private function connect()
    {
        $db = new PDO(
            "odbc:DSN=" . ODBC_DATA_CONNECTION . ";HOST=" . DATA_SERVER . ";port=" . DATA_PORT,
            HIVE_USER,
            HIVE_PASS
        );
        return $db;
    }

    protected function setUp()
    {
        $this->timeStart = microtime(true);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown()
    {
        echo "Elapsed Time : " . round(microtime(true) - $this->timeStart, 2) . "\n";
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
